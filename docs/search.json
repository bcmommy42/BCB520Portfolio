[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome!\nI hope you’re having a great day!"
  },
  {
    "objectID": "posts/Network_Data/Network_Data.html",
    "href": "posts/Network_Data/Network_Data.html",
    "title": "Network_Data",
    "section": "",
    "text": "Code\n# Create the data frame\ndata &lt;- data.frame(\n  name = c(\"Betsy\", \"Claire\", \"Barrie\", \"Henry\", \"Ian\", \"John\", \"Kyle\", \"Marwa\", \"Priya\", \"Justice\", \"Sharon\"),\n  microbiology = c(1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0),\n  crochet = c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1),\n  BehavioralEcology = c(0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0),\n  ListeningToMusic = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1),\n  BeefFabrication = c(0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0),\n  Gardening = c(1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0),\n  AI = c(0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1),\n  StainedGlass = c(0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0),\n  Entomology = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n  Terrariums = c(0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0),\n  MATLAB = c(0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0),\n  Architecture = c(0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0),\n  DataScience = c(1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1),\n  Pinball = c(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0),\n  PublicAdministration = c(0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1),\n  Lifting = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0),\n  Genomics = c(1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0),\n  Movies = c(1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1),\n  Mathematica = c(0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1),\n  Driving = c(1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1),\n  MassSpec = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1),\n  Hiking = c(0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1)\n)\n\n# Remove the name column for the adjacency matrix\nadj_matrix &lt;- as.matrix(data[, -1])\n\n# Print the adjacency matrix\nprint(adj_matrix)\n\n\n      microbiology crochet BehavioralEcology ListeningToMusic BeefFabrication\n [1,]            1       1                 0                1               0\n [2,]            1       1                 0                1               1\n [3,]            0       0                 1                1               0\n [4,]            1       0                 1                1               0\n [5,]            0       0                 0                1               0\n [6,]            0       0                 0                1               0\n [7,]            0       0                 1                1               0\n [8,]            0       0                 0                1               0\n [9,]            0       0                 0                1               0\n[10,]            0       0                 1                0               1\n[11,]            0       1                 0                1               0\n      Gardening AI StainedGlass Entomology Terrariums MATLAB Architecture\n [1,]         1  0            0          0          0      0            0\n [2,]         1  1            0          0          0      0            0\n [3,]         1  1            0          0          0      0            0\n [4,]         1  1            1          0          1      0            1\n [5,]         1  0            0          0          0      1            0\n [6,]         0  1            0          0          0      0            0\n [7,]         0  1            0          0          1      0            0\n [8,]         1  0            0          0          0      1            1\n [9,]         1  0            1          0          0      0            0\n[10,]         1  0            0          0          0      0            1\n[11,]         0  1            0          0          0      0            0\n      DataScience Pinball PublicAdministration Lifting Genomics Movies\n [1,]           1       0                    0       0        1      1\n [2,]           0       0                    0       1        0      1\n [3,]           1       0                    0       0        1      1\n [4,]           0       0                    1       1        1      1\n [5,]           1       0                    1       0        0      0\n [6,]           1       0                    0       0        0      1\n [7,]           1       0                    1       0        0      1\n [8,]           0       1                    1       0        0      1\n [9,]           1       0                    0       1        0      1\n[10,]           0       0                    0       0        1      1\n[11,]           1       0                    1       0        0      1\n      Mathematica Driving MassSpec Hiking\n [1,]           0       1        0      0\n [2,]           0       0        0      1\n [3,]           0       0        0      0\n [4,]           0       0        0      1\n [5,]           1       1        0      0\n [6,]           1       0        0      0\n [7,]           0       1        0      1\n [8,]           0       0        0      1\n [9,]           0       0        0      1\n[10,]           1       0        0      1\n[11,]           1       1        1      1\n\n\n\n\nCode\n# Set a CRAN mirror\nchooseCRANmirror(graphics = FALSE, ind = 1) # This sets the first CRAN mirror from the list\n\ninstall.packages(\"igraph\")\n\n\npackage 'igraph' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\betsy\\AppData\\Local\\Temp\\Rtmp0Gi3ho\\downloaded_packages\n\n\nCode\n# Load the necessary library\nlibrary(ggplot2)\n\n# Define the edges based on the provided data\nedges &lt;- data.frame(\n  from = c(\"Betsy\", \"Claire\", \"Henry\", \"Ian\", \"John\", \"Justice\", \"Kyle\", \"Marwa\", \"Priya\", \"Sharon\"),\n  to = c(\"Shelley\", \"Phil\", \"Armando\", \"Ching-An\", \"Terence\", \"Nuismer\", \"Simona\", \"Manoj\", \"Adam\", \"Shelley\"),\n  connected = c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)\n)\n\n# Extract unique nodes\nnodes &lt;- unique(c(edges$from, edges$to))\n\n# Assign positions for plotting (e.g., in a circle for simplicity)\nangles &lt;- seq(0, 2*pi, length.out = length(nodes) + 1)\nnode_positions &lt;- data.frame(\n  name = nodes,\n  x = cos(angles[-length(angles)]),\n  y = sin(angles[-length(angles)])\n)\n\n# Merge node positions with edge data\nedges &lt;- merge(edges, node_positions, by.x = \"from\", by.y = \"name\", suffixes = c(\".from\", \".to\"))\nedges &lt;- merge(edges, node_positions, by.x = \"to\", by.y = \"name\", suffixes = c(\".to\", \".from\"))\n\n# Create the plot\np &lt;- ggplot() +\n  # Add edges\n  geom_segment(data = edges, aes(x = x.from, y = y.from, xend = x.to, yend = y.to), color = \"grey\") +\n  # Add nodes\n  geom_point(data = node_positions, aes(x = x, y = y), size = 5, color = \"blue\") +\n  # Add labels\n  geom_text(data = node_positions, aes(x = x, y = y, label = name), vjust = -1, size = 3) +\n  theme_minimal() +\n  labs(title = \"Not Fancy Line-Node Plot Connecting Students and Advisors\", x = \"\", y = \"\")\n\n# Print the plot\nprint(p)\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\n# Load necessary libraries\n# Load necessary libraries\n# Load necessary libraries\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(dplyr)\n\n# Create the data frame with unique names, including Sharon\ndata &lt;- data.frame(\n  name = c(\"Betsy\", \"Claire\", \"Henry\", \"Ian\", \"John\", \n           \"Kyle\", \"Lucas\", \"Marwa\", \"Priya\", \"Sharon\", \"Justice\",\"Adam\", \"Armando\", \"Barrie\",\"Manoj\", \"Phil\", \"Scott\", \"Shelley1\", \"Shelley2\", \n           \"Simona\", \"Terence\"),\n  department = c(\"FCS\", \"AVFS\", \"EPPN\", \"Engineering\", \n                 \"Computer Science\", \"CNR\", \"EPPN\", \"Politics and Philosophy\", \n                 \"Biology\", \"FCS\", \"Biology\", \"Biology\", \"EPPN\", \"Biology\", \n                 \"Politics and Philosophy\", \"AVFS\", \"Biology\", \"FCS\", \"FCS\", \"CNR\", \"Computer Science\"),\n  rank = c(\"Graduate\", \"Graduate\", \"Graduate\", \"Graduate\", \"Graduate\", \n           \"Graduate\", \"Graduate\", \"Graduate\", \"Graduate\", \"Graduate\", \"Graduate\", \n           \"Professor\", \"Professor\", \"Professor\", \"Professor\", \n           \"Professor\", \"Professor\", \"Professor\", \"Professor\", \"Professor\", \"Professor\")\n)\n\n# Create edges by connecting nodes in the same department\nedges &lt;- expand.grid(from = data$name, to = data$name) %&gt;%\n  left_join(data, by = c(\"from\" = \"name\")) %&gt;%\n  left_join(data, by = c(\"to\" = \"name\"), suffix = c(\".from\", \".to\")) %&gt;%\n  filter(department.from == department.to, from != to)\n\n# Create a graph object\ngraph &lt;- graph_from_data_frame(edges, vertices = data, directed = FALSE)\n\n# Plot with ggraph\nggraph(graph, layout = \"fr\") +  # 'fr' is a force-directed layout\n  geom_edge_link(aes(color = rank.from), size = 1) +\n  geom_node_point(aes(color = department), size = 5) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  scale_edge_color_manual(values = c(\"Graduate\" = \"grey\", \"Professor\" = \"red\")) +\n  scale_color_brewer(palette = \"Set3\") +\n  theme_minimal() +\n  labs(title = \"Line-Node Plot by Department and Rank\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary libraries\nlibrary(igraph)\nlibrary(ggraph)\n\n# Create the data frame\nadvisor_data &lt;- data.frame(\n  from = c(\"Geraline\", \"Lucas\", \"Heidi\", \"Yaotian\", \"Ian\", \"Betsy\", \"Sharon\", \n           \"Priya\", \"Claire\", \"Marwa\", \"Justice\", \"John\", \"Kyle\", \"Henry\"),\n  to = c(\"Scott\", \"Ed\", \"Yimin\", \"Jian\", \"Ching-An\", \"Shelley\", \"Shelley\", \n         \"Adam\", \"Phil\", \"Manoj\", \"Nuismer\", \"Terence\", \"Simona\", \"Armando\"),\n  Advisor = c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)\n)\n\n# Create graph object from the data frame\ngraph &lt;- graph_from_data_frame(advisor_data, directed = TRUE)\n\n# Plot with ggraph\nggraph(graph, layout = 'tree') + \n  geom_edge_link(arrow = arrow(length = unit(4, 'mm')), end_cap = circle(3, 'mm')) +\n  geom_node_point(size = 5) +\n  geom_node_text(aes(label = name), vjust = -0.5, hjust = 1, size = 3) +\n  theme_minimal() +\n  labs(title = \"Hierarchical Tree of Advisors\")"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "",
    "text": "We start out by uploading the data set and getting our library packages all ready.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\n\nCombinedNHL &lt;- read.csv(\"C:/Users/betsy/OneDrive/CombinedNHL.csv\")"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#in-this-assignment-we-are-combining-everyones-data-to-figure-out-who-would-win-each-award.",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#in-this-assignment-we-are-combining-everyones-data-to-figure-out-who-would-win-each-award.",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "",
    "text": "We start out by uploading the data set and getting our library packages all ready.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\n\nCombinedNHL &lt;- read.csv(\"C:/Users/betsy/OneDrive/CombinedNHL.csv\")"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-hart-memorial-trophy",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-hart-memorial-trophy",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "The Hart Memorial Trophy",
    "text": "The Hart Memorial Trophy\n\n\nCode\nHart1 &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Hart\")\n\nWeighted &lt;-Hart1 %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\n\nBased on the classroom votes, the winner of the Hart Trophy is Leon Draisaitl"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-vezina-trophy",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-vezina-trophy",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "The Vezina Trophy",
    "text": "The Vezina Trophy\n\n\nCode\nVez1 &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Vezina\")\n\nWeighted1 &lt;-Vez1 %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted1, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\n\nBased on classroom votes, Connor Hallebuyck is the winner!"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-calder-memorial-trophy",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-calder-memorial-trophy",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "The Calder Memorial Trophy",
    "text": "The Calder Memorial Trophy\n\n\nCode\nCal &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Calder\")\n\nWeighted2 &lt;-Cal %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted2, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\n\nBased on our classroom vote, Kirill Marchenko"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-frank-j.selke-trophy",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-frank-j.selke-trophy",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "The Frank J.Selke Trophy",
    "text": "The Frank J.Selke Trophy\n\n\nCode\nSelke &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Selke\")\n\nWeighted3 &lt;-Selke %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted3, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\n\nBased on the classroom votes, the winner is Brandon Tanev"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-lady-byng-memorial-trophy",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-lady-byng-memorial-trophy",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "The Lady Byng Memorial Trophy",
    "text": "The Lady Byng Memorial Trophy\n\n\nCode\nByng&lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Byng\")\n\nWeighted4 &lt;-Byng %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted4, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\n\nBased on classroom votes, the winner is Brayden Point"
  },
  {
    "objectID": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-james-norris-memorial-trophy",
    "href": "posts/HockeyBallotAllTogether/Hockey_Ballots_Winner.html#the-james-norris-memorial-trophy",
    "title": "Assignment_6_Hockey_Ballots_Winner",
    "section": "The James Norris Memorial Trophy",
    "text": "The James Norris Memorial Trophy\n\n\nCode\nNorris&lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Norris\")\n\nWeighted5 &lt;-Norris %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted5, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\n\nBased on classroom votes, the winner is Cale Makar"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html",
    "title": "BCB 520 Final Project",
    "section": "",
    "text": "One of the largest sources of loss in the dairy industry is mastitis. Mastitis, an infection of the mammary tissue, is common before or during first lactation in heifers. Infections during initial lactogenesis can cause issues with low milk supply throughout the first and subsequent lactations in cows. Here, we are trying to determine if there is a change in the udder microbiome by exposing one quarter of the udder to S.aureus via infusion while exposing another different quarter to an infusion of saline. Secretions from the udders were collected over the course of 20 days. On the final day of the study, the heifers were sacrificed and tissue from the 2 quarters were collected. In each quarter, a portion of the tissue close to the gland cistern (center) was collected along with a portion of tissue closer to the fat pad (edge).\nUsing the collected secretions and tissue samples, we will attempt to discover: 1. Is there a microbiome detectable in mammary tissue? 2. Is there a tissue microbiome difference within the same cow between infected/uninfected quarters of the udder? 3. Is there a tissue microbiome difference within the same cow between the edge versus center tissue of the infected/uninfected tissue? 4. How does an IMI with S. aureus affect the microbiome of milk secretions? Is there a change over time? 5. How does the microbiome of the tissue samples compare to the microbiome of the secretion samples?"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#bar-chart-comparing-tissue-locations-to-relative-abundance",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#bar-chart-comparing-tissue-locations-to-relative-abundance",
    "title": "BCB 520 Final Project",
    "section": "Bar chart comparing Tissue Locations to Relative Abundance",
    "text": "Bar chart comparing Tissue Locations to Relative Abundance\nI asked Anything LLM to make me a mock relative abundance data set for tissue from the same animal but for 2 separate locations within the quarters. Bar charts are a great visualization tool because human eyes like them! Using color and height of the bars, it is an easy way to compare groups. In this bar chart, I used color channels to differentiate between the tissue locations. The bars compare the mean relative abundance of 4 specific genera and a non-specific ‘other’ group. From this visualization, we can see that across all bacteria genera the mean relative abundance stays pretty consistent based on the tissue type, with edge tissue containing a slightly higher mean than center tissue.\n\n\nCode\nlibrary(tidyverse)\nuse_this_mock &lt;-read.csv(\"C:/Users/betsy/OneDrive/use_this_mock.csv\")\ndata &lt;- data.frame(use_this_mock,\n  Location = c('Edge', 'Center'),\n  Infection_Status= c('Infection.Status'),\n  Bacteria = c('Staph.aureus', 'E..coli', 'Lactobacillus','Bacillus','Other')\n)\n\nlong_data &lt;- data %&gt;%\n  pivot_longer(\n    cols = c(Staph.aureus, E..coli, Lactobacillus, Bacillus, Other),\n    names_to = \"Bacterial_Types\",\n    values_to = \"Abundance\"\n  )\n\n# Create the bar graph\nggplot(long_data, aes(x = Bacteria, y = Abundance, fill = Location)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Relative Abundance of Bacteria by Tissue Location\",\n       x = \"Bacterial Species\",\n       y = \" Mean Relative Abundance (%)\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Edge\" = \"skyblue\", \"Center\" = \"orange\"))"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#mean-relative-abundance-between-infected-and-uninfected-tissue-samples",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#mean-relative-abundance-between-infected-and-uninfected-tissue-samples",
    "title": "BCB 520 Final Project",
    "section": "Mean Relative Abundance between Infected and Uninfected Tissue Samples",
    "text": "Mean Relative Abundance between Infected and Uninfected Tissue Samples\nI wanted to compare the mean Relative Abundance across 80 animals, comparing the uninfected quarter to the infected quarter tissue samples. Once again, I am using a bar chart. The color channels represent the infection status of the quarter sample, with red being infected and blue being uninfected. With this bar chart, I asked it for extra genera of bacteria, so this time we have 7 genera (with some specific species as well) and then one category of ‘other’ genera. We see consistency among the genera based on infection status across all the categories except S.aureus, which is much higher in the infected quarter sample. This makes sense, considering the infected quarter was infused with S.aureus.\nInitially, I considered using only a bar chart for this data. I opted to add a box and whisker plot as well. A box and whisker plot allows for more information. Box and whisker plots are great because they show you the minimum and maximum of your data (whiskers), the first quartile (below the black line in the colored box), the median (the black line in the colored box),and the third quartile (above the black line in the colored box). They also show outliers which can be helpful for some data.\n\n\nCode\nset.seed(123)  # For reproducibility\n\n# Parameters\nn_animals &lt;- 80\nbacteria_genera &lt;- c(\"Staph_aureus\", \"E_coli\", \"Lactobacillus\", \"Bacillus\", \"Clostridium\", \"Streptococcus\", \"Salmonella\", \"Other\")\n\n# Function to generate random microbiome data with infection consideration\ngenerate_abundance &lt;- function(infected = FALSE) {\n  abundance &lt;- runif(length(bacteria_genera), min = 0, max = 100)\n  if (infected) {\n    abundance[1] &lt;- abundance[1] + 50  # Increase Staph_aureus abundance for infected samples\n  }\n  return(round(100 * abundance / sum(abundance), 2))  # Normalize to sum to 100%\n}\n\n# Create the dataset\ndata &lt;- data.frame()\n\nfor (i in 1:n_animals) {\n  for (location in c(\"Edge\", \"Center\")) {\n    # Infected quarter samples\n    infected_abundance &lt;- generate_abundance(infected = TRUE)\n    infected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      QuarterStatus = \"Infected\",\n      Location = location,\n      t(infected_abundance)\n    )\n    \n    # Uninfected quarter samples\n    uninfected_abundance &lt;- generate_abundance(infected = FALSE)\n    uninfected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      QuarterStatus = \"Uninfected\",\n      Location = location,\n      t(uninfected_abundance)\n    )\n    \n    # Set column names\n    colnames(infected_data)[4:ncol(infected_data)] &lt;- bacteria_genera\n    colnames(uninfected_data)[4:ncol(uninfected_data)] &lt;- bacteria_genera\n    \n    # Add to the dataset\n    data &lt;- rbind(data, infected_data, uninfected_data)\n  }\n}\n\n# Summarize data for bar chart\nsummary_data &lt;- data %&gt;%\n  pivot_longer(cols = Staph_aureus:Other, names_to = \"Bacteria\", values_to = \"Abundance\") %&gt;%\n  group_by(QuarterStatus, Bacteria) %&gt;%\n  summarize(Mean_Abundance = mean(Abundance))\n\n# Create the bar chart\nggplot(summary_data, aes(x = Bacteria, y = Mean_Abundance, fill = QuarterStatus)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Mean Bacterial Abundance in Infected vs. Uninfected Tissue Samples\",\n       x = \"Bacterial Genera\",\n       y = \"Mean Abundance (%)\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Infected\" = \"red\", \"Uninfected\" = \"blue\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\nCode\n# Load necessary library\nlibrary(ggplot2)\nlibrary(tidyr)\n\n# Convert data from wide to long format for ggplot2\nlong_data &lt;- pivot_longer(\n  data,\n  cols = Staph_aureus:Other,\n  names_to = \"Bacteria\",\n  values_to = \"Abundance\"\n)\n\n# Create the box-and-whisker plot with custom fill colors\nggplot(long_data, aes(x = Bacteria, y = Abundance, fill = QuarterStatus)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"Infected\" = \"tomato\", \"Uninfected\" = \"yellow\")) +\n  theme_minimal() +\n  labs(\n    title = \"Bacterial Abundance by Infection Status\",\n    x = \"Bacteria Genera\",\n    y = \"Abundance (%)\"\n  ) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#principal-coordinate-analysis-plot-looking-at-microbiome-of-tissue-location-and-infection-status",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#principal-coordinate-analysis-plot-looking-at-microbiome-of-tissue-location-and-infection-status",
    "title": "BCB 520 Final Project",
    "section": "Principal Coordinate Analysis Plot Looking at Microbiome of Tissue Location and Infection Status",
    "text": "Principal Coordinate Analysis Plot Looking at Microbiome of Tissue Location and Infection Status\nBefore being able to use a PCoA plot, we must calculate the Bray Curtis Dissimilarity of the data. The Bray Curtis Dissimilarity matrix is a representation of how dissimilar the relative abundance is of different sites/situations. It is on a scale of 0 to 1 with 0 being the relative abundance is identical, and 1 being that the relative abundance is completely different for each location.\nOnce we have this dissimilarity matrix we can then create a PCoA plot. PCoA plots are tools that are known as metric multi-dimensionally scaling; this means that they can take a lot of different measurements within the data and show it on a lower dimensional scale while maintaining the distances between the objects. In a PCoA plot, the x-axis explains the most variance, and the y-axis will explain the second most variance.\nOften if sites are similar you will see clustering on a PCoA plot. In this example, we see a clustering together of the uninfected center and uninfected edge tissue, while also seeing a clustering of the infected edge and center tissue. It’s not incredibly apparent, as there is obvious overlap as well.\n\n\nCode\n# Set a CRAN mirror\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\n\n# Now install packages\ninstall.packages(\"vegan\")\n\n\npackage 'vegan' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\betsy\\AppData\\Local\\Temp\\RtmpIzVB7R\\downloaded_packages\n\n\nCode\nset.seed(123)  # For reproducibility\n\n# Parameters\nn_animals &lt;- 80\nbacteria_genera &lt;- c(\"Staph_aureus\", \"E_coli\", \"Lactobacillus\", \"Bacillus\", \"Clostridium\", \"Streptococcus\", \"Salmonella\", \"Other\")\n\n# Function to generate random microbiome data with infection consideration\ngenerate_abundance &lt;- function(infected = FALSE) {\n  abundance &lt;- runif(length(bacteria_genera), min = 0, max = 100)\n  if (infected) {\n    abundance[1] &lt;- abundance[1] + 50  # Increase Staph_aureus abundance for infected samples\n  }\n  return(round(100 * abundance / sum(abundance), 2))  # Normalize to sum to 100%\n}\n\n# Create the dataset\ndata &lt;- data.frame()\n\nfor (i in 1:n_animals) {\n  for (location in c(\"Edge\", \"Center\")) {\n    # Create a vector for infected and uninfected samples\n    infected_abundance &lt;- generate_abundance(infected = TRUE)\n    uninfected_abundance &lt;- generate_abundance(infected = FALSE)\n\n    # Infected quarter samples\n    infected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      QuarterStatus = \"Infected\",\n      Location = location,\n      Staph_aureus = infected_abundance[1],\n      E_coli = infected_abundance[2],\n      Lactobacillus = infected_abundance[3],\n      Bacillus = infected_abundance[4],\n      Clostridium = infected_abundance[5],\n      Streptococcus = infected_abundance[6],\n      Salmonella = infected_abundance[7],\n      Other = infected_abundance[8]\n    )\n\n    # Uninfected quarter samples\n    uninfected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      QuarterStatus = \"Uninfected\",\n      Location = location,\n      Staph_aureus = uninfected_abundance[1],\n      E_coli = uninfected_abundance[2],\n      Lactobacillus = uninfected_abundance[3],\n      Bacillus = uninfected_abundance[4],\n      Clostridium = uninfected_abundance[5],\n      Streptococcus = uninfected_abundance[6],\n      Salmonella = uninfected_abundance[7],\n      Other = uninfected_abundance[8]\n    )\n\n    # Add to the dataset\n    data &lt;- rbind(data, infected_data, uninfected_data)\n  }\n}\n\n# Print the first few rows of the dataset\nhead(data)\n\n\n  AnimalID QuarterStatus Location Staph_aureus E_coli Lactobacillus Bacillus\n1   Cow_01      Infected     Edge        14.93  14.95          7.75    16.74\n2   Cow_01    Uninfected     Edge        11.81   9.78         20.48     9.70\n3   Cow_01      Infected   Center        14.11   0.80          6.20    18.05\n4   Cow_01    Uninfected   Center        13.65  14.75         11.33    12.37\n5   Cow_02      Infected     Edge        29.67  19.82          0.61    11.91\n6   Cow_02    Uninfected     Edge         6.13  17.79         17.76    15.83\n  Clostridium Streptococcus Salmonella Other\n1       17.83          0.86      10.01 16.92\n2       14.51         12.26       2.20 19.26\n3       16.82         13.10      12.11 18.80\n4        6.02          3.06      20.05 18.78\n5       18.90          5.39       7.93  5.77\n6        6.54          5.96      10.00 20.00\n\n\nCode\n# Load necessary libraries\ninstall.packages(\"vegan\")\n\n\npackage 'vegan' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\betsy\\AppData\\Local\\Temp\\RtmpIzVB7R\\downloaded_packages\n\n\nCode\ninstall.packages(\"ggplot2\")\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Generate the data (based on the previous example)\nset.seed(123)  # For reproducibility\n\n# Parameters\nn_animals &lt;- 80\nbacteria_genera &lt;- c(\"Staph_aureus\", \"E_coli\", \"Lactobacillus\", \"Bacillus\", \"Clostridium\", \"Streptococcus\", \"Salmonella\", \"Other\")\n\n# Function to generate random microbiome data with infection consideration\ngenerate_abundance &lt;- function(infected = FALSE) {\n  abundance &lt;- runif(length(bacteria_genera), min = 0, max = 100)\n  if (infected) {\n    abundance[1] &lt;- abundance[1] + 50  # Increase Staph_aureus abundance for infected samples\n  }\n  return(round(100 * abundance / sum(abundance), 2))  # Normalize to sum to 100%\n}\n\n# Create the dataset\ndata &lt;- data.frame()\n\nfor (i in 1:n_animals) {\n  for (location in c(\"Edge\", \"Center\")) {\n    # Infected quarter samples\n    infected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      QuarterStatus = \"Infected\",\n      Location = location,\n      t(generate_abundance(infected = TRUE))\n    )\n\n    # Uninfected quarter samples\n    uninfected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      QuarterStatus = \"Uninfected\",\n      Location = location,\n      t(generate_abundance(infected = FALSE))\n    )\n\n    # Set column names\n    colnames(infected_data)[4:ncol(infected_data)] &lt;- bacteria_genera\n    colnames(uninfected_data)[4:ncol(uninfected_data)] &lt;- bacteria_genera\n\n    # Add to the dataset\n    data &lt;- rbind(data, infected_data, uninfected_data)\n  }\n}\n\n# Prepare the data for PCoA\ncombined_data &lt;- data %&gt;%\n  mutate(SampleType = paste(QuarterStatus, Location, sep = \"_\")) %&gt;%\n  select(-AnimalID, -QuarterStatus, -Location)\n\n# Compute Bray-Curtis distance matrix\ndistance_matrix &lt;- vegdist(combined_data[, -ncol(combined_data)], method = \"bray\")\n\n# Perform PCoA\npcoa_result &lt;- cmdscale(distance_matrix, eig = TRUE, k = 2)\n\n# Create a data frame with the PCoA results\npcoa_df &lt;- as.data.frame(pcoa_result$points)\ncolnames(pcoa_df) &lt;- c('PC1', 'PC2')\npcoa_df$SampleType &lt;- combined_data$SampleType\n\n# Plot the PCoA\nggplot(pcoa_df, aes(x = PC1, y = PC2, color = SampleType)) +\n  geom_point(size = 3) +\n  labs(title = \"PCoA of Microbiome Data: Edge vs Center and Infected vs Uninfected\",\n       x = \"Principal Coordinate 1\",\n       y = \"Principal Coordinate 2\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\n    \"Infected_Edge\" = \"red\", \n    \"Infected_Center\" = \"darkred\", \n    \"Uninfected_Edge\" = \"blue\", \n    \"Uninfected_Center\" = \"darkblue\"\n  ))"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#heat-map-of-secretion-data",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#heat-map-of-secretion-data",
    "title": "BCB 520 Final Project",
    "section": "Heat Map of Secretion Data",
    "text": "Heat Map of Secretion Data\nI wanted to look at several things at once, including relative abundance differences between the days secretions were collected, between infection status, and between the different animals. This heat map allowed me to look at all of the above in an easy and concise manner. I also was able to create a heatmap showing just the average overall relative abundance and used that to compare the infected versus the uninfected samples across the 20 days of collection.\n\n\nCode\nmock_quarters_daily &lt;-read.csv(\"C:/Users/betsy/OneDrive/mock_quarters_daily.csv\")\n\n# Convert data to long format\nlong_data2 &lt;- mock_quarters_daily %&gt;%\n  pivot_longer(cols = Staph.aureus:Other, \n               names_to = \"Bacteria\", \n               values_to = \"Abundance\")\n\n# Create the heat map\nggplot(long_data2, aes(x = Day, y = Bacteria, fill = Abundance)) +\n  geom_tile() +\n  facet_grid(Quarter ~ Animal.ID) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  labs(title = \"Heat Map of Relative Abundance: Secretions by Day, Quarter, and Animal\",\n       x = \"Day\",\n       y = \"Bacterial Species\",\n       fill = \"Abundance\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nCode\nread.csv(\"C:/Users/betsy/OneDrive/mock_quarters_daily.csv\")\n\n\n   Sample.ID Animal.ID Day    Quarter Staph.aureus E..coli Lactobacillus\n1       S001       A01   1   Infected           55      10             5\n2       S002       A01   1 Uninfected            5      20            40\n3       S003       A02   1   Infected           53      12             6\n4       S004       A02   1 Uninfected            6      18            41\n5       S005       A03   1   Infected           54      11             5\n6       S006       A03   1 Uninfected            4      19            41\n7       S007       A01   4   Infected           56       9             5\n8       S008       A01   4 Uninfected            5      21            39\n9       S009       A02   4   Infected           54      10             6\n10      S010       A02   4 Uninfected            6      19            40\n11      S011       A03   4   Infected           53      12             5\n12      S012       A03   4 Uninfected            4      18            42\n13      S013       A01   8   Infected           57       9             5\n14      S014       A01   8 Uninfected            5      20            40\n15      S015       A02   8   Infected           55      10             6\n16      S016       A02   8 Uninfected            6      17            42\n17      S017       A03   8   Infected           54      11             5\n18      S018       A03   8 Uninfected            4      18            41\n19      S019       A01  10   Infected           56       9             5\n20      S020       A01  10 Uninfected            5      19            41\n21      S021       A02  10   Infected           53      12             5\n22      S022       A02  10 Uninfected            6      20            39\n23      S023       A03  10   Infected           55      10             6\n24      S024       A03  10 Uninfected            4      19            41\n25      S025       A01  14   Infected           57       9             5\n26      S026       A01  14 Uninfected            5      21            39\n27      S027       A02  14   Infected           54      10             6\n28      S028       A02  14 Uninfected            6      18            41\n29      S029       A03  14   Infected           55      11             5\n30      S030       A03  14 Uninfected            4      20            40\n31      S031       A01  20   Infected           56       9             5\n32      S032       A01  20 Uninfected            5      19            41\n33      S033       A02  20   Infected           54      10             6\n34      S034       A02  20 Uninfected            6      18            42\n35      S035       A03  20   Infected           55      11             5\n36      S036       A03  20 Uninfected            4      19            41\n37      S109       A18  14   Infected           57       9             5\n38      S110       A18  14 Uninfected            5      21            39\n   Bacillus Other\n1         5    25\n2        10    25\n3         4    25\n4        10    25\n5         5    25\n6        11    25\n7         6    24\n8        11    24\n9         5    25\n10       10    25\n11        5    25\n12       11    25\n13        5    24\n14       11    24\n15        5    24\n16       11    24\n17        6    24\n18       12    25\n19        5    25\n20       10    25\n21        5    25\n22       10    25\n23        5    24\n24       11    25\n25        5    24\n26       11    24\n27        5    25\n28       10    25\n29        5    24\n30       11    25\n31        6    24\n32       11    24\n33        5    25\n34        9    25\n35        5    24\n36       12    24\n37        5    24\n38       10    25\n\n\nCode\nlong_data1 &lt;- mock_quarters_daily %&gt;%\n  pivot_longer(cols = Staph.aureus:Other, \n               names_to = \"Bacteria\", \n               values_to = \"Abundance\")\n\n# Create the heat map\nggplot(long_data1, aes(x = Day, y = Bacteria, fill = Abundance)) +\n  geom_tile() +\n  facet_wrap(~ Quarter) +\n  scale_fill_gradient(low = \"white\", high = \"red\") +\n  labs(title = \"Heat Map of Relative Abundance in Secretion by Day and Quarter\",\n       x = \"Day\",\n       y = \"Bacterial Species\",\n       fill = \"Abundance\") +\n  theme_minimal()"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#distribution-of-bacterial-abundance-by-infection-status-and-sample-type",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#distribution-of-bacterial-abundance-by-infection-status-and-sample-type",
    "title": "BCB 520 Final Project",
    "section": "Distribution of Bacterial Abundance by Infection Status and Sample Type",
    "text": "Distribution of Bacterial Abundance by Infection Status and Sample Type\nInitially, I considered using a bar chart for this data. Unfortunately, there was just far too much going on for it to be a good visualization tool. I opted for a bar and whisker plot instead. This allowed me to differentiate between the infection status of the tissue using different positions on the plot (Left side is data for the infected and right side is for uninfected) as well as different colors for sample type(blue is secretion while red is tissue). Then I could use the x axis to show the genera of the bacteria and the y axis to show the mean relative abundance. This visualization shows pretty similar mean relative abundance patterns in the infected and uninfected tissue, with S.aureus being higher in both secretions and tissue that were infected\n\n\nCode\n# Load necessary libraries\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Generate the mock microbiome data (based on the previous example)\nset.seed(123)  # For reproducibility\n\n# Parameters\nn_animals &lt;- 80\nbacteria_genera &lt;- c(\"Staph_aureus\", \"E_coli\", \"Lactobacillus\", \"Bacillus\", \"Clostridium\", \"Streptococcus\", \"Salmonella\", \"Other\")\n\n# Function to generate random microbiome data with infection consideration\ngenerate_abundance &lt;- function(infected = FALSE) {\n  abundance &lt;- runif(length(bacteria_genera), min = 0, max = 100)\n  if (infected) {\n    abundance[1] &lt;- abundance[1] + 50  # Increase Staph_aureus abundance for infected samples\n  }\n  return(round(100 * abundance / sum(abundance), 2))  # Normalize to sum to 100%\n}\n\n# Create the dataset\ndata &lt;- data.frame()\n\nfor (i in 1:n_animals) {\n  for (sample_type in c(\"Tissue\", \"Secretion\")) {\n    # Infected samples\n    infected_abundance &lt;- generate_abundance(infected = TRUE)\n    infected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      Status = \"Infected\",\n      SampleType = sample_type,\n      t(infected_abundance)\n    )\n    \n    # Uninfected samples\n    uninfected_abundance &lt;- generate_abundance(infected = FALSE)\n    uninfected_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      Status = \"Uninfected\",\n      SampleType = sample_type,\n      t(uninfected_abundance)\n    )\n    \n    # Set column names\n    colnames(infected_data)[4:ncol(infected_data)] &lt;- bacteria_genera\n    colnames(uninfected_data)[4:ncol(uninfected_data)] &lt;- bacteria_genera\n    \n    # Add to the dataset\n    data &lt;- rbind(data, infected_data, uninfected_data)\n  }\n}\n\n\nlong_data &lt;- data %&gt;%\n  pivot_longer(\n    cols = all_of(bacteria_genera),  # Ensure this variable is defined\n    names_to = \"Bacterial_Species\",\n    values_to = \"Abundance\"\n  )\n\n# Create the box-and-whisker plot\nggplot(long_data, aes(x = Bacterial_Species, y = Abundance, fill = SampleType)) +\n  geom_boxplot(position = position_dodge(1)) +\n  labs(title = \"Distribution of Bacterial Abundance by Infection Status and Sample Type\",\n       x = \"Bacterial Genera\",\n       y = \"Abundance (%)\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"Tissue\" = \"red\", \"Secretion\" = \"Blue\")) +\n  facet_wrap(~ Status, ncol = 2) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#principal-coordinate-analysis-plot-for-tissue-versus-secretions",
    "href": "posts/BCB_520_Final_Project/BCB_520_Final_Project.html#principal-coordinate-analysis-plot-for-tissue-versus-secretions",
    "title": "BCB 520 Final Project",
    "section": "Principal Coordinate Analysis Plot for Tissue Versus Secretions",
    "text": "Principal Coordinate Analysis Plot for Tissue Versus Secretions\nOnce again, I was wanting to see if there would be distinct clustering of microbiome data, but this time by tissue or secretion. This PCoA shows no distinct clustering.\n\n\nCode\nset.seed(123)  # For reproducibility\n\n# Parameters\nn_animals &lt;- 80\nbacteria_genera &lt;- c(\"Staph_aureus\", \"E_coli\", \"Lactobacillus\", \"Bacillus\", \"Clostridium\", \"Streptococcus\", \"Salmonella\", \"Other\")\n\n# Function to generate random microbiome data\ngenerate_abundance &lt;- function() {\n  abundance &lt;- runif(length(bacteria_genera), min = 0, max = 100)\n  return(round(100 * abundance / sum(abundance), 2))  # Normalize to sum to 100%\n}\n\n# Create the dataset\ndata &lt;- data.frame()\n\nfor (i in 1:n_animals) {\n  for (condition in c(\"Infected_Tissue\", \"Uninfected_Tissue\", \"Infected_Secretion\", \"Uninfected_Secretion\")) {\n    sample_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      Condition = condition,\n      t(generate_abundance())\n    )\n    colnames(sample_data)[3:ncol(sample_data)] &lt;- bacteria_genera\n    data &lt;- rbind(data, sample_data)\n  }\n}\n\n# Print the first few rows of the dataset\nhead(data)\n\n\n  AnimalID            Condition Staph_aureus E_coli Lactobacillus Bacillus\n1   Cow_01      Infected_Tissue         6.02  16.51          8.57    18.49\n2   Cow_01    Uninfected_Tissue        11.81   9.78         20.48     9.70\n3   Cow_01   Infected_Secretion         5.14   0.88          6.85    19.94\n4   Cow_01 Uninfected_Secretion        13.65  14.75         11.33    12.37\n5   Cow_02      Infected_Tissue        19.66  22.64          0.70    13.60\n6   Cow_02    Uninfected_Tissue         6.13  17.79         17.76    15.83\n  Clostridium Streptococcus Salmonella Other\n1       19.70          0.95      11.06 18.69\n2       14.51         12.26       2.20 19.26\n3       18.58         14.47      13.38 20.77\n4        6.02          3.06      20.05 18.78\n5       21.59          6.16       9.06  6.59\n6        6.54          5.96      10.00 20.00\n\n\nCode\n# Load necessary libraries\ninstall.packages(\"vegan\")\ninstall.packages(\"ggplot2\")\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Generate the data (based on the previous example)\nset.seed(123)  # For reproducibility\n\n# Parameters\nn_animals &lt;- 80\nbacteria_genera &lt;- c(\"Staph_aureus\", \"E_coli\", \"Lactobacillus\", \"Bacillus\", \"Clostridium\", \"Streptococcus\", \"Salmonella\", \"Other\")\n\n# Function to generate random microbiome data\ngenerate_abundance &lt;- function() {\n  abundance &lt;- runif(length(bacteria_genera), min = 0, max = 100)\n  return(round(100 * abundance / sum(abundance), 2))  # Normalize to sum to 100%\n}\n\n# Create the dataset\ndata &lt;- data.frame()\n\nfor (i in 1:n_animals) {\n  for (condition in c(\"Infected_Tissue\", \"Uninfected_Tissue\", \"Infected_Secretion\", \"Uninfected_Secretion\")) {\n    sample_data &lt;- data.frame(\n      AnimalID = paste0(\"Cow_\", sprintf(\"%02d\", i)),\n      Condition = condition,\n      t(generate_abundance())\n    )\n    colnames(sample_data)[3:ncol(sample_data)] &lt;- bacteria_genera\n    data &lt;- rbind(data, sample_data)\n  }\n}\n\n# Prepare the data for PCoA\n# Separate tissue and secretion samples\ndata_tissue &lt;- data %&gt;%\n  filter(grepl(\"Tissue\", Condition)) %&gt;%\n  select(-AnimalID, -Condition)\n\ndata_secretion &lt;- data %&gt;%\n  filter(grepl(\"Secretion\", Condition)) %&gt;%\n  select(-AnimalID, -Condition)\n\n# Combine data for PCoA\ncombined_data &lt;- rbind(\n  data_tissue %&gt;% mutate(SampleType = \"Tissue\"),\n  data_secretion %&gt;% mutate(SampleType = \"Secretion\")\n)\n\n# Compute Bray-Curtis distance matrix\ndistance_matrix &lt;- vegdist(combined_data[, -ncol(combined_data)], method = \"bray\")\n\n# Perform PCoA\npcoa_result &lt;- cmdscale(distance_matrix, eig = TRUE, k = 2)\n\n# Create a data frame with the PCoA results\npcoa_df &lt;- as.data.frame(pcoa_result$points)\ncolnames(pcoa_df) &lt;- c('PC1', 'PC2')\npcoa_df$SampleType &lt;- combined_data$SampleType\n\n# Plot the PCoA\nggplot(pcoa_df, aes(x = PC1, y = PC2, color = SampleType)) +\n  geom_point(size = 3) +\n  labs(title = \"PCoA of Microbiome Data: Tissue vs Secretion\",\n       x = \"Principal Coordinate 1\",\n       y = \"Principal Coordinate 2\") +\n  theme_minimal() +\n  scale_color_manual(values = c(\"Tissue\" = \"blue\", \"Secretion\" = \"green\"))"
  },
  {
    "objectID": "posts/Assignment-3/Assignment3.html",
    "href": "posts/Assignment-3/Assignment3.html",
    "title": "Assignment 3- Getting to know GitHub",
    "section": "",
    "text": "In this assignment, all I’m doing is using a data set I found to make some visualizations. I am using box and whisker plots to look at breastfeeding rates across the years 2018, 2020, and 2022. I am using Box and Whisker plots again to look at mPINC scores and how they have changed over the years.\n\n\nCode\n BSBC.Data..BF.and.mPINC.over.3.reports &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data. BF and mPINC over 3 reports.csv\")\n   View(BSBC.Data..BF.and.mPINC.over.3.reports)\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n View(BSBC.Data..BF.and.mPINC.over.3.reports)\n BF2022 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports$BF.at.6.months..2022\n BF2020 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports$BF.at.6.months.2020\n BF2018 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports$BF.at.6.months.2018\n mPINC2022 &lt;-BSBC.Data..BF.and.mPINC.over.3.reports$mPINC..2022\n mPINC2020 &lt;-BSBC.Data..BF.and.mPINC.over.3.reports$mPINC.at.2020\n mPINC2018 &lt;-BSBC.Data..BF.and.mPINC.over.3.reports$mPINC.2018\n\n\n\n\nCode\n# Assuming your data frame is called 'df'\ndf_long &lt;- BSBC.Data..BF.and.mPINC.over.3.reports %&gt;%\n  rename(BF.at.6.months.2022=BF.at.6.months..2022) %&gt;%\n  select(State,BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022) %&gt;%\n  pivot_longer(\n    cols = c(BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022),  # Replace with your column names\n    names_to = \"year\",\n    values_to = \"BF\", \n    names_prefix = \"BF.at.6.months.\"\n  )\n\n\n\nggplot(data=df_long, aes(y=BF, x=year)) +\n  geom_boxplot() + \n  theme_minimal() + \n  labs( title = \"Distribution of BF by Year\", x = \"Year\", y = \"BF Value\" )\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_long2 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports %&gt;%\n  rename(mPINC.2022=mPINC..2022,\n         mPINC.2020=mPINC.at.2020) %&gt;%\n  select(State,mPINC.2018, mPINC.2020, mPINC.2022) %&gt;%\n  pivot_longer(\n    cols = c(mPINC.2018, mPINC.2020, mPINC.2022),  # Replace with your column names\n    names_to = \"year\",\n    values_to = \"mPINC\", \n    names_prefix = \"mPINC.\"\n  )\n\nggplot(data=df_long2, aes(y=mPINC, x=year)) +\n  geom_boxplot()"
  },
  {
    "objectID": "posts/Assignment-3/Assignment3.html#getting-to-know-r",
    "href": "posts/Assignment-3/Assignment3.html#getting-to-know-r",
    "title": "Assignment 3- Getting to know GitHub",
    "section": "",
    "text": "In this assignment, all I’m doing is using a data set I found to make some visualizations. I am using box and whisker plots to look at breastfeeding rates across the years 2018, 2020, and 2022. I am using Box and Whisker plots again to look at mPINC scores and how they have changed over the years.\n\n\nCode\n BSBC.Data..BF.and.mPINC.over.3.reports &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data. BF and mPINC over 3 reports.csv\")\n   View(BSBC.Data..BF.and.mPINC.over.3.reports)\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n View(BSBC.Data..BF.and.mPINC.over.3.reports)\n BF2022 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports$BF.at.6.months..2022\n BF2020 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports$BF.at.6.months.2020\n BF2018 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports$BF.at.6.months.2018\n mPINC2022 &lt;-BSBC.Data..BF.and.mPINC.over.3.reports$mPINC..2022\n mPINC2020 &lt;-BSBC.Data..BF.and.mPINC.over.3.reports$mPINC.at.2020\n mPINC2018 &lt;-BSBC.Data..BF.and.mPINC.over.3.reports$mPINC.2018\n\n\n\n\nCode\n# Assuming your data frame is called 'df'\ndf_long &lt;- BSBC.Data..BF.and.mPINC.over.3.reports %&gt;%\n  rename(BF.at.6.months.2022=BF.at.6.months..2022) %&gt;%\n  select(State,BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022) %&gt;%\n  pivot_longer(\n    cols = c(BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022),  # Replace with your column names\n    names_to = \"year\",\n    values_to = \"BF\", \n    names_prefix = \"BF.at.6.months.\"\n  )\n\n\n\nggplot(data=df_long, aes(y=BF, x=year)) +\n  geom_boxplot() + \n  theme_minimal() + \n  labs( title = \"Distribution of BF by Year\", x = \"Year\", y = \"BF Value\" )\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_long2 &lt;- BSBC.Data..BF.and.mPINC.over.3.reports %&gt;%\n  rename(mPINC.2022=mPINC..2022,\n         mPINC.2020=mPINC.at.2020) %&gt;%\n  select(State,mPINC.2018, mPINC.2020, mPINC.2022) %&gt;%\n  pivot_longer(\n    cols = c(mPINC.2018, mPINC.2020, mPINC.2022),  # Replace with your column names\n    names_to = \"year\",\n    values_to = \"mPINC\", \n    names_prefix = \"mPINC.\"\n  )\n\nggplot(data=df_long2, aes(y=mPINC, x=year)) +\n  geom_boxplot()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BCB504Portfolio",
    "section": "",
    "text": "BCB 520 Final Project\n\n\nThe Impact of Staph. aureus Mastitis on Udder Tissue and Secretions in Heifers During Induced Lactogenesis\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nApr 26, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork_Data\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nApr 15, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nSpatial Data\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nApr 15, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment_6_Hockey_Ballots_Winner\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nMar 23, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 5- Hockey Ballot\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nMar 10, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\n“ASSIGNMENT 4”\n\n\n“Marks and Channels”\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n“Marks and Channels doing their thing and… Not doing it well sometimes.”\n\n\n\n\n\nMar 2, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 3- Getting to know GitHub\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nMar 1, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 2\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nFeb 28, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nAssignment 1\n\n\n\n\n\n\nAssignment\n\n\nDataViz\n\n\n\n\n\n\n\n\n\nFeb 27, 2025\n\n\nBetsy Church\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 9, 2025\n\n\nBetsy Church\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Betsy Church",
    "section": "",
    "text": "https://linkedin.com\nhttps://github.com\nBetsy Church is a Graduate Student at University of Idaho. Current research project is about the potential effects that a Staph. aureus infection may have on the tissue and secretion microbiomes of artificially induced lactation in heifers. When not in the lab, she can be found crocheting, watching medical drama on tv, or playing video games. Often times, her dog Finn or Cat Olivander can be found snuggled in her lap."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Betsy Church",
    "section": "Education",
    "text": "Education\nUniversity of Idaho | Moscow, ID\nPhD in Nutrition Sciences | August 2023- Present\nWeber State University | Ogden, UT\nBachelor of Science in Microbiology | August 2016- April 2021"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html",
    "href": "Hockey_Ballot_Stuff.html",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "",
    "text": "We start out by uploading the data set and getting our library packages all ready.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\n\nCombinedNHL &lt;- read.csv(\"C:/Users/betsy/OneDrive/CombinedNHL.csv\")"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#in-this-assignment-we-are-combining-everyones-data-to-figure-out-who-would-win-each-award.",
    "href": "Hockey_Ballot_Stuff.html#in-this-assignment-we-are-combining-everyones-data-to-figure-out-who-would-win-each-award.",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "",
    "text": "We start out by uploading the data set and getting our library packages all ready.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\n\nCombinedNHL &lt;- read.csv(\"C:/Users/betsy/OneDrive/CombinedNHL.csv\")"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#the-hart-memorial-trophy",
    "href": "Hockey_Ballot_Stuff.html#the-hart-memorial-trophy",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "The Hart Memorial Trophy",
    "text": "The Hart Memorial Trophy\n\nHart1 &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Hart\")\n\nWeighted &lt;-Hart1 %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\nBased on the classroom votes, the winner of the Hart Trophy is Leon Draisaitl"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#the-vezina-trophy",
    "href": "Hockey_Ballot_Stuff.html#the-vezina-trophy",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "The Vezina Trophy",
    "text": "The Vezina Trophy\n\nVez1 &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Vezina\")\n\nWeighted1 &lt;-Vez1 %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted1, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\nBased on classroom votes, Connor Hallebuyck is the winner!"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#the-calder-memorial-trophy",
    "href": "Hockey_Ballot_Stuff.html#the-calder-memorial-trophy",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "The Calder Memorial Trophy",
    "text": "The Calder Memorial Trophy\n\nCal &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Calder\")\n\nWeighted2 &lt;-Cal %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted2, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\nBased on our classroom vote, Kirill Marchenko"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#the-frank-j.selke-trophy",
    "href": "Hockey_Ballot_Stuff.html#the-frank-j.selke-trophy",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "The Frank J.Selke Trophy",
    "text": "The Frank J.Selke Trophy\n\nSelke &lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Selke\")\n\nWeighted3 &lt;-Selke %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted3, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\nBased on the classroom votes, the winner is Brandon Tanev"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#the-lady-byng-memorial-trophy",
    "href": "Hockey_Ballot_Stuff.html#the-lady-byng-memorial-trophy",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "The Lady Byng Memorial Trophy",
    "text": "The Lady Byng Memorial Trophy\n\nByng&lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Byng\")\n\nWeighted4 &lt;-Byng %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted4, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\nBased on classroom votes, the winner is Brayden Point"
  },
  {
    "objectID": "Hockey_Ballot_Stuff.html#the-james-norris-memorial-trophy",
    "href": "Hockey_Ballot_Stuff.html#the-james-norris-memorial-trophy",
    "title": "Hockey_Garbage… I mean NHL Ballot",
    "section": "The James Norris Memorial Trophy",
    "text": "The James Norris Memorial Trophy\n\nNorris&lt;- CombinedNHL %&gt;%\n  select(Award, Rank, Player) %&gt;%\n  filter(Award == \"Norris\")\n\nWeighted5 &lt;-Norris %&gt;%\n  mutate(\n    WeightedScore = case_when(\n      Rank == 1 ~ 10,\n      Rank == 2 ~ 7,\n      Rank == 3 ~ 5,\n      Rank == 4 ~ 3,\n      Rank == 5 ~ 1\n    )\n  )\n\nggplot(data=Weighted5, aes(x= WeightedScore,  y= reorder(Player, WeightedScore)))+\ngeom_col()+\n  xlab(\"Weighted Score\")+\n  ylab(\"Player\")\n\n\n\n\n\n\n\n\nBased on classroom votes, the winner is Cale Makar"
  },
  {
    "objectID": "posts/Anscomb-Quartet/Assignment_1.html",
    "href": "posts/Anscomb-Quartet/Assignment_1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\n\n\nWarning: package 'gridExtra' was built under R version 4.4.2\n\n\nCode\nlibrary(datasets)\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::combine() masks gridExtra::combine()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\ndatasets::anscombe\n\n\n   x1 x2 x3 x4    y1   y2    y3    y4\n1  10 10 10  8  8.04 9.14  7.46  6.58\n2   8  8  8  8  6.95 8.14  6.77  5.76\n3  13 13 13  8  7.58 8.74 12.74  7.71\n4   9  9  9  8  8.81 8.77  7.11  8.84\n5  11 11 11  8  8.33 9.26  7.81  8.47\n6  14 14 14  8  9.96 8.10  8.84  7.04\n7   6  6  6  8  7.24 6.13  6.08  5.25\n8   4  4  4 19  4.26 3.10  5.39 12.50\n9  12 12 12  8 10.84 9.13  8.15  5.56\n10  7  7  7  8  4.82 7.26  6.42  7.91\n11  5  5  5  8  5.68 4.74  5.73  6.89"
  },
  {
    "objectID": "posts/Anscomb-Quartet/Assignment_1.html#anscombe-quartet--library-choices",
    "href": "posts/Anscomb-Quartet/Assignment_1.html#anscombe-quartet--library-choices",
    "title": "Assignment 1",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\n\n\nWarning: package 'gridExtra' was built under R version 4.4.2\n\n\nCode\nlibrary(datasets)\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::combine() masks gridExtra::combine()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\ndatasets::anscombe\n\n\n   x1 x2 x3 x4    y1   y2    y3    y4\n1  10 10 10  8  8.04 9.14  7.46  6.58\n2   8  8  8  8  6.95 8.14  6.77  5.76\n3  13 13 13  8  7.58 8.74 12.74  7.71\n4   9  9  9  8  8.81 8.77  7.11  8.84\n5  11 11 11  8  8.33 9.26  7.81  8.47\n6  14 14 14  8  9.96 8.10  8.84  7.04\n7   6  6  6  8  7.24 6.13  6.08  5.25\n8   4  4  4 19  4.26 3.10  5.39 12.50\n9  12 12 12  8 10.84 9.13  8.15  5.56\n10  7  7  7  8  4.82 7.26  6.42  7.91\n11  5  5  5  8  5.68 4.74  5.73  6.89"
  },
  {
    "objectID": "posts/Anscomb-Quartet/Assignment_1.html#tidied-up",
    "href": "posts/Anscomb-Quartet/Assignment_1.html#tidied-up",
    "title": "Assignment 1",
    "section": "Tidied up",
    "text": "Tidied up\n\n\nCode\ntidy_anscombe &lt;- anscombe %&gt;%\n pivot_longer(cols = everything(),\n              names_to = c(\".value\", \"set\"),\n              names_pattern = \"(.)(.)\")\ntidy_anscombe_summary &lt;- tidy_anscombe %&gt;%\n  group_by(set) %&gt;%\n  summarise(across(.cols = everything(),\n                   .fns = lst(min,max,median,mean,sd,var),\n                   .names = \"{col}_{fn}\"))\n#&gt; `summarise()` ungrouping output (override with `.groups` argument)\n\nvars&lt;-c(\"set\", \"x_mean\", \"x_var\",  \"y_mean\", \"y_var\")\nthing&lt;- as.data.frame(tidy_anscombe_summary[vars])\nknitr::kable(thing)\n\n\n\n\n\nset\nx_mean\nx_var\ny_mean\ny_var\n\n\n\n\n1\n9\n11\n7.500909\n4.127269\n\n\n2\n9\n11\n7.500909\n4.127629\n\n\n3\n9\n11\n7.500000\n4.122620\n\n\n4\n9\n11\n7.500909\n4.123249"
  },
  {
    "objectID": "posts/Anscomb-Quartet/Assignment_1.html#why-visualization-matters",
    "href": "posts/Anscomb-Quartet/Assignment_1.html#why-visualization-matters",
    "title": "Assignment 1",
    "section": "Why Visualization Matters",
    "text": "Why Visualization Matters\n\n\nCode\nggplot(tidy_anscombe,\n       aes(x = x,\n           y = y)) +\n  geom_point() +\n  geom_point(data = tidy_anscombe_summary, aes(x=x_mean, y = y_mean, color = \"red\", size = 5),\n             show.legend = FALSE)+\n  facet_wrap(~set) +\n  geom_smooth(method = \"lm\", se = FALSE)\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nGoalies &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/Goalies.csv\")\nRookieGoalies &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/RookieGoalies.csv\")\nRookieSkaterIndividual &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/RookieSkaterIndividual.csv\")\nRookieSkaterOnIce &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/RookieSkaterOnIce.csv\")\nSkaterIndividualstats &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/SkaterIndividualstats.csv\")\nSkaterOnIcestats &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/SkaterOnIcestats.csv\")\n\n\n\n\n\nAwarded to the “player judged most valuable to his team.” This isn’t necessarily the best overall player, but rather the one who contributes most significantly to his team’s success.\n\n\nCode\nplayers_data &lt;- data.frame(SkaterOnIcestats)\n  Player = c(\"Player\")\n  CF. = c(\"CF.\")\n  \nplayers_data2 &lt;-SkaterOnIcestats %&gt;%\n  select (Player, CF.) \n\nfiltered_data &lt;- players_data2 %&gt;%\n  dplyr::filter(CF. &gt;= 65)\n\n\n\n\nHart&lt;-ggplot(data=filtered_data, aes(x=CF., y= reorder(Player, CF.))) +\n  geom_bar(stat=\"identity\") +\n  xlab(\"CF Percent\")+\n  ylab(\"Player Name\")\n\nprint(Hart)\n\n\n\n\n\n\n\n\n\nBased on the data here, with higher CF% meaning a more positive contribution to the team while on the ice, I would vote the following:\n1.Samuel Buldoc\n2.Nathan Clurman\n3.Justin Sourdif\n4.Shayne Gostisbehere\n5.Rasmus Asblund\n\n\n\nPresented to the goaltender “adjudged to be the best at this position.” NHL general managers vote on this award.\n\n\nCode\nvezina_trophy &lt;-data_frame(Goalies)\n\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\nCode\n Player = c(\"Player\")\n  SV = c(\"SV.\")\n  \nvez_data &lt;-Goalies %&gt;%\n  select (Player, SV.) \n\nfiltered_vez &lt;-vez_data %&gt;%\n  dplyr::filter(SV. &gt;=0.90)\n\n  \nggplot(data=filtered_vez, aes(x=SV., y= reorder(Player, SV.))) +\n  geom_bar(stat=\"identity\") +\n  xlab(\"SV\")+\n  ylab(\"Player Name\")\n\n\n\n\n\n\n\n\n\nThis is great… But potentially misleading… Let’s dig a bit deeper because who catches things 100% of the time? We want to know who has played the most games. So we are going to filter it to an arbitrary number of 45. This leaves us with 5 players.. Perfect! From there, let’s look back at SV% with just those 5…\n\n\nCode\nvez_data1 &lt;- data.frame(Goalies) %&gt;%\n   filter(GP &gt;=45) %&gt;%\n   select(Player, SV.)\n\n\nggplot(data=vez_data1, aes(x=SV., y= reorder(Player, SV.)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nBased on the SV% of these five players I am casting my ballot as follows:\n\nConnor Hellebuyck\nAndrei Vasilevskiy\nIlya Sorokin\nSam Montembeault\nJuuse Saros\n\n\n\n\nAwarded to the defenseman who demonstrates “the greatest all-around ability” at the position.\n\n\nCode\nJN_trophy &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"D\") %&gt;%\n  filter(Shots.Blocked &gt;=125) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=JN_trophy, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nThis shows how many shots the individual blocked. Let’s take a look at another aspect of defense and see if there are any overlaps!\n\n\nCode\nJN_trophy1 &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"D\") %&gt;%\n  filter(Takeaways &gt;= 40) %&gt;%\n  select(Player,Takeaways)\n\n  ggplot(data=JN_trophy1, aes(x=Takeaways, y= reorder(Player, Takeaways)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nHmm… There is only 1 name that overlaps and that is Jake Sanderson. So I will put him at the top of my list… I then have to decide what is more important; blocks or takeaways…. I can’t choose so I am going to sprinkle in both and vote the following:\n\nJake Sanderson\nIan Cole\nJaccob Slavin\nJacob Trouba\nCale Makar\n\n\n\n\nGiven to the player “adjudged to be the most proficient in his first year of competition.” This is essentially the rookie of the year award.\n\n\nCode\nCM_Trophy &lt;-data.frame(RookieSkaterOnIce) %&gt;%\n  filter(CF. &gt;=60) %&gt;%\n  select(Player,CF.)\n\nggplot(data=CM_Trophy, aes(x=CF., y= reorder(Player, CF.)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nOnce again, I’m using CF% as my metric. Based on that, I would cast my ballot as follows:\n\nNathan Clurman\nSamuel Bolduc\nAngus Crookshank\nRyan Suzuki\nAlex Laferriere\n\n\n\n\nAwarded to the forward who best excels in the defensive aspects of the game.\nI read that there are 3 forward positions: Center, Left wing and Right wing. I am going to look at Center position first. I am choosing to base the defensive aspect on blocking shots.\n\n\nCode\nFJS_Trophy_Center &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"C\") %&gt;%\n  filter(Shots.Blocked &gt;= 60) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=FJS_Trophy_Center, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nI am now going to look at the Left wing\n\n\nCode\nFJS_Trophy_Left &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"L\") %&gt;%\n  filter(Shots.Blocked &gt;= 60) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=FJS_Trophy_Left, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nNow I am looking at Right wing\n\n\nCode\nFJS_Trophy_Right &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"R\") %&gt;%\n  filter(Shots.Blocked &gt;= 60) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=FJS_Trophy_Right, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nAfter looking at all of the forward positions and seeing who blocked greater than 60 shots I would cast my ballot as follows:\n\nBrandon Tanev\nAlex Tuch\nNoel Acciari\nVincent Trocheck\nRickard Rakell\n\n\n\n\nPresented to the player who exhibits “the best type of sportsmanship and gentlemanly conduct combined with a high standard of playing ability.”\nFor this one, I plan to find the players with the lowest number of penalties, no misconduct, and the most points\n\n\nCode\nLBM_trophy &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Total.Penalties &lt;= \"10\") %&gt;%\n  filter (Misconduct ==0) %&gt;%\n  filter (Total.Points &gt;= 45) %&gt;%\n  select(Player, Total.Points)\n\nggplot(data=LBM_trophy, aes(x=Total.Points, y= reorder(Player, Total.Points)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nBased on this criteria, I cast my ballot as follows:\n\nKyle Connor\nSidney Crosby\nBrayden Point\nAnze Kopitar\nShea Theodore"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#load-library-and-environments",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#load-library-and-environments",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\nGoalies &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/Goalies.csv\")\nRookieGoalies &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/RookieGoalies.csv\")\nRookieSkaterIndividual &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/RookieSkaterIndividual.csv\")\nRookieSkaterOnIce &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/RookieSkaterOnIce.csv\")\nSkaterIndividualstats &lt;-read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/SkaterIndividualstats.csv\")\nSkaterOnIcestats &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/A5-TabularData/SkaterOnIcestats.csv\")"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#hart-memorial-trophy",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#hart-memorial-trophy",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Awarded to the “player judged most valuable to his team.” This isn’t necessarily the best overall player, but rather the one who contributes most significantly to his team’s success.\n\n\nCode\nplayers_data &lt;- data.frame(SkaterOnIcestats)\n  Player = c(\"Player\")\n  CF. = c(\"CF.\")\n  \nplayers_data2 &lt;-SkaterOnIcestats %&gt;%\n  select (Player, CF.) \n\nfiltered_data &lt;- players_data2 %&gt;%\n  dplyr::filter(CF. &gt;= 65)\n\n\n\n\nHart&lt;-ggplot(data=filtered_data, aes(x=CF., y= reorder(Player, CF.))) +\n  geom_bar(stat=\"identity\") +\n  xlab(\"CF Percent\")+\n  ylab(\"Player Name\")\n\nprint(Hart)\n\n\n\n\n\n\n\n\n\nBased on the data here, with higher CF% meaning a more positive contribution to the team while on the ice, I would vote the following:\n1.Samuel Buldoc\n2.Nathan Clurman\n3.Justin Sourdif\n4.Shayne Gostisbehere\n5.Rasmus Asblund"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#vezina-trophy",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#vezina-trophy",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Presented to the goaltender “adjudged to be the best at this position.” NHL general managers vote on this award.\n\n\nCode\nvezina_trophy &lt;-data_frame(Goalies)\n\n\nWarning: `data_frame()` was deprecated in tibble 1.1.0.\nℹ Please use `tibble()` instead.\n\n\nCode\n Player = c(\"Player\")\n  SV = c(\"SV.\")\n  \nvez_data &lt;-Goalies %&gt;%\n  select (Player, SV.) \n\nfiltered_vez &lt;-vez_data %&gt;%\n  dplyr::filter(SV. &gt;=0.90)\n\n  \nggplot(data=filtered_vez, aes(x=SV., y= reorder(Player, SV.))) +\n  geom_bar(stat=\"identity\") +\n  xlab(\"SV\")+\n  ylab(\"Player Name\")\n\n\n\n\n\n\n\n\n\nThis is great… But potentially misleading… Let’s dig a bit deeper because who catches things 100% of the time? We want to know who has played the most games. So we are going to filter it to an arbitrary number of 45. This leaves us with 5 players.. Perfect! From there, let’s look back at SV% with just those 5…\n\n\nCode\nvez_data1 &lt;- data.frame(Goalies) %&gt;%\n   filter(GP &gt;=45) %&gt;%\n   select(Player, SV.)\n\n\nggplot(data=vez_data1, aes(x=SV., y= reorder(Player, SV.)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nBased on the SV% of these five players I am casting my ballot as follows:\n\nConnor Hellebuyck\nAndrei Vasilevskiy\nIlya Sorokin\nSam Montembeault\nJuuse Saros"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#james-norris-memorial-trophy",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#james-norris-memorial-trophy",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Awarded to the defenseman who demonstrates “the greatest all-around ability” at the position.\n\n\nCode\nJN_trophy &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"D\") %&gt;%\n  filter(Shots.Blocked &gt;=125) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=JN_trophy, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nThis shows how many shots the individual blocked. Let’s take a look at another aspect of defense and see if there are any overlaps!\n\n\nCode\nJN_trophy1 &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"D\") %&gt;%\n  filter(Takeaways &gt;= 40) %&gt;%\n  select(Player,Takeaways)\n\n  ggplot(data=JN_trophy1, aes(x=Takeaways, y= reorder(Player, Takeaways)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nHmm… There is only 1 name that overlaps and that is Jake Sanderson. So I will put him at the top of my list… I then have to decide what is more important; blocks or takeaways…. I can’t choose so I am going to sprinkle in both and vote the following:\n\nJake Sanderson\nIan Cole\nJaccob Slavin\nJacob Trouba\nCale Makar"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#calder-memorial-trophy",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#calder-memorial-trophy",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Given to the player “adjudged to be the most proficient in his first year of competition.” This is essentially the rookie of the year award.\n\n\nCode\nCM_Trophy &lt;-data.frame(RookieSkaterOnIce) %&gt;%\n  filter(CF. &gt;=60) %&gt;%\n  select(Player,CF.)\n\nggplot(data=CM_Trophy, aes(x=CF., y= reorder(Player, CF.)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nOnce again, I’m using CF% as my metric. Based on that, I would cast my ballot as follows:\n\nNathan Clurman\nSamuel Bolduc\nAngus Crookshank\nRyan Suzuki\nAlex Laferriere"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#frank-j-selke-memorial-trophy",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#frank-j-selke-memorial-trophy",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Awarded to the forward who best excels in the defensive aspects of the game.\nI read that there are 3 forward positions: Center, Left wing and Right wing. I am going to look at Center position first. I am choosing to base the defensive aspect on blocking shots.\n\n\nCode\nFJS_Trophy_Center &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"C\") %&gt;%\n  filter(Shots.Blocked &gt;= 60) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=FJS_Trophy_Center, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nI am now going to look at the Left wing\n\n\nCode\nFJS_Trophy_Left &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"L\") %&gt;%\n  filter(Shots.Blocked &gt;= 60) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=FJS_Trophy_Left, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nNow I am looking at Right wing\n\n\nCode\nFJS_Trophy_Right &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Position == \"R\") %&gt;%\n  filter(Shots.Blocked &gt;= 60) %&gt;%\n  select(Player, Shots.Blocked)\n\nggplot(data=FJS_Trophy_Right, aes(x=Shots.Blocked, y= reorder(Player, Shots.Blocked)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nAfter looking at all of the forward positions and seeing who blocked greater than 60 shots I would cast my ballot as follows:\n\nBrandon Tanev\nAlex Tuch\nNoel Acciari\nVincent Trocheck\nRickard Rakell"
  },
  {
    "objectID": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#lady-byng-memorial-trophy",
    "href": "posts/Assignment_5_Hockey_Ballot/Assignment_5_Hockey_Ballot.html#lady-byng-memorial-trophy",
    "title": "Assignment 5- Hockey Ballot",
    "section": "",
    "text": "Presented to the player who exhibits “the best type of sportsmanship and gentlemanly conduct combined with a high standard of playing ability.”\nFor this one, I plan to find the players with the lowest number of penalties, no misconduct, and the most points\n\n\nCode\nLBM_trophy &lt;-data.frame(SkaterIndividualstats) %&gt;%\n  filter(Total.Penalties &lt;= \"10\") %&gt;%\n  filter (Misconduct ==0) %&gt;%\n  filter (Total.Points &gt;= 45) %&gt;%\n  select(Player, Total.Points)\n\nggplot(data=LBM_trophy, aes(x=Total.Points, y= reorder(Player, Total.Points)))+\ngeom_col()\n\n\n\n\n\n\n\n\n\nBased on this criteria, I cast my ballot as follows:\n\nKyle Connor\nSidney Crosby\nBrayden Point\nAnze Kopitar\nShea Theodore"
  },
  {
    "objectID": "posts/Data-Set-Assignment-2/Assignment 2.html",
    "href": "posts/Data-Set-Assignment-2/Assignment 2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Code\n BSBC.Data &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n   View(BSBC.Data)"
  },
  {
    "objectID": "posts/Data-Set-Assignment-2/Assignment 2.html#import-data-set",
    "href": "posts/Data-Set-Assignment-2/Assignment 2.html#import-data-set",
    "title": "Assignment 2",
    "section": "",
    "text": "Code\n BSBC.Data &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n   View(BSBC.Data)"
  },
  {
    "objectID": "posts/Data-Set-Assignment-2/Assignment 2.html#description-of-data-set",
    "href": "posts/Data-Set-Assignment-2/Assignment 2.html#description-of-data-set",
    "title": "Assignment 2",
    "section": "Description of Data Set",
    "text": "Description of Data Set\nThis data set is tabular data and the attribute is categorical/quantitative. The data includes the breastfeeding rates (in %) of each state and the mPINC scores (algorithmic data) of each state. I have also included the breastfeeding rates of the different regions, based off of WIC regions. These all are from the year 2018,2020, and 2022."
  },
  {
    "objectID": "posts/MarksChannels/index.html",
    "href": "posts/MarksChannels/index.html",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "Code\n##figure 1\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.2\n\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nBSBC.Data &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n View(BSBC.Data)\n \n df_long1 &lt;- BSBC.Data %&gt;%\n   select(Region,BF.2018,BF.2020,BF.2022) %&gt;%\n   pivot_longer(cols = c(BF.2018,BF.2020,BF.2022),\n                names_to = \"Year\",\n                values_to = \"BF\",\n                names_prefix = \"BF.\")\n\ndf_long &lt;- BSBC.Data %&gt;%\n  rename(BF.at.6.months.2022=BF.at.6.months..2022) %&gt;%\n  select(State,BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022) %&gt;%\n  pivot_longer(\n    cols = c(BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022),  # Replace with your column names\n    names_to = \"year\",\n    values_to = \"BF\", \n    names_prefix = \"BF.at.6.months.\"\n  )"
  },
  {
    "objectID": "posts/MarksChannels/index.html#loading-library-and-necessary-data",
    "href": "posts/MarksChannels/index.html#loading-library-and-necessary-data",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "Code\n##figure 1\nlibrary(tidyverse)\n\n\nWarning: package 'tidyverse' was built under R version 4.4.2\n\n\nWarning: package 'ggplot2' was built under R version 4.4.2\n\n\nWarning: package 'tidyr' was built under R version 4.4.2\n\n\nWarning: package 'readr' was built under R version 4.4.2\n\n\nWarning: package 'dplyr' was built under R version 4.4.2\n\n\nWarning: package 'forcats' was built under R version 4.4.2\n\n\nWarning: package 'lubridate' was built under R version 4.4.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nBSBC.Data &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n View(BSBC.Data)\n \n df_long1 &lt;- BSBC.Data %&gt;%\n   select(Region,BF.2018,BF.2020,BF.2022) %&gt;%\n   pivot_longer(cols = c(BF.2018,BF.2020,BF.2022),\n                names_to = \"Year\",\n                values_to = \"BF\",\n                names_prefix = \"BF.\")\n\ndf_long &lt;- BSBC.Data %&gt;%\n  rename(BF.at.6.months.2022=BF.at.6.months..2022) %&gt;%\n  select(State,BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022) %&gt;%\n  pivot_longer(\n    cols = c(BF.at.6.months.2018, BF.at.6.months.2020, BF.at.6.months.2022),  # Replace with your column names\n    names_to = \"year\",\n    values_to = \"BF\", \n    names_prefix = \"BF.at.6.months.\"\n  )"
  },
  {
    "objectID": "posts/MarksChannels/index.html#expressiveness-and-effectiveness",
    "href": "posts/MarksChannels/index.html#expressiveness-and-effectiveness",
    "title": "“ASSIGNMENT 4”",
    "section": "Expressiveness and Effectiveness",
    "text": "Expressiveness and Effectiveness\nFigure. 1\n\n\nCode\nggplot(df_long1, aes(x=Region,y=BF))+\n  geom_bar(stat = \"identity\", aes(fill=Region)) +\n  xlab(\"WIC Region\") +\n  ylab(\"BF Rate at 6 months (percent)\") +\n  ggtitle(\"BF rate by WIC Region\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 0.1),\n        legend.position = \"right\")+\n  facet_wrap(~Year)\n\n\nWarning: Removed 126 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\nFigure 2. What needs to be expressed here is expressed; Rates of breastfeeding at 6 months by state and it adds in years… However, the effectiveness is horrible. There is way too much going on and it is hard to follow and determine what is what. It really needs to be separate graphs, or separated by region instead of state or something to make it more clear and concise.\n\n\nCode\nggplot(df_long, aes(x=State,y=BF))+\n  geom_bar(stat = \"identity\", aes(fill=State, alpha=year)) +\n  xlab(\"State\") +\n  ylab(\"BF Rate at 6 months (percent\") +\n  ggtitle(\"BF rate by state\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 0.1),\n        legend.position = \"right\")\n\n\nWarning: Using alpha for a discrete variable is not advised."
  },
  {
    "objectID": "posts/MarksChannels/index.html#discriminability",
    "href": "posts/MarksChannels/index.html#discriminability",
    "title": "“ASSIGNMENT 4”",
    "section": "Discriminability",
    "text": "Discriminability\nFigure 3. Box and Whisker allows you to see outliers more easily. It also is just an easy way to see values, and is just overall very clean and easy to discern.\n\n\nCode\nggplot(data=df_long, aes(y=BF, x=year)) +\n  geom_boxplot() + \n  theme_minimal() + \n  labs( title = \"Distribution of BF by Year\", x = \"Year\", y = \"BF Value\" )\n\n\n\n\n\n\n\n\n\nFigure 4. This is unnecessary addition of color that doesn’t really add to the discernability.\n\n\nCode\nggplot(data=df_long, aes(y=BF, x=year)) +\n  geom_boxplot(fill= c(\"red\", \"blue\", \"green\"))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#seperability",
    "href": "posts/MarksChannels/index.html#seperability",
    "title": "“ASSIGNMENT 4”",
    "section": "Seperability",
    "text": "Seperability\nI feel like Figures 1 & 2 are good examples of this as well, so I am repeating them in this section:\n\n\nCode\nggplot(df_long1, aes(x=Region,y=BF))+\n  geom_bar(stat = \"identity\", aes(fill=Region)) +\n  xlab(\"WIC Region\") +\n  ylab(\"BF Rate at 6 months (percent)\") +\n  ggtitle(\"BF rate by WIC Region\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 0.1),\n        legend.position = \"right\")+\n  facet_wrap(~Year)\n\n\nWarning: Removed 126 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n\n\n\n\n\n\n\n\n\nCode\nggplot(df_long, aes(x=State,y=BF))+\n  geom_bar(stat = \"identity\", aes(fill=State, alpha=year)) +\n  xlab(\"State\") +\n  ylab(\"BF Rate at 6 months (percent\") +\n  ggtitle(\"BF rate by state\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 0.1),\n        legend.position = \"right\")\n\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\n##PopOut\nI made it so that Alabama breastfeeding data from 2018 stood out as a red dot.\n\n\nCode\nr1&lt;-subset(BSBC.Data, State==\"Alabama\" )\nggplot(df_long1, aes(x=Year, y=BF))+\n  geom_point() +\n  theme_minimal()+\n   geom_point(data = r1, aes(x=State, y =BF.at.6.months.2018),\n             color = \"red\")\n\n\nWarning: Removed 126 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "posts/Spatial_Data/Spatial_Data.html",
    "href": "posts/Spatial_Data/Spatial_Data.html",
    "title": "Spatial Data",
    "section": "",
    "text": "I made a heat map of the breastfeeding rates at 6 months across the US, based off of the Breastfeeding Report Card data from the CDC for 2022.\n\n\nCode\nread.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n\n\n            State BF.at.6.months..2022 mPINC..2022 BF.at.6.months.2020\n1         Alabama                 21.0          76                20.4\n2          Alaska                 30.9          82                35.3\n3         Arizona                 24.0          78                24.6\n4        Arkansas                 24.4          75                19.4\n5      California                 27.3          87                28.2\n6        Colorado                 32.1          85                34.1\n7     Connecticut                 26.3          87                25.7\n8        Delaware                 25.0          84                23.6\n9         Florida                 18.2          81                19.9\n10        Georgia                 18.7          75                22.1\n11         Hawaii                 27.7          75                30.6\n12          Idaho                 30.4          77                24.6\n13       Illinois                 28.3          82                23.9\n14        Indiana                 21.5          83                21.1\n15           Iowa                 27.0          75                24.8\n16         Kansas                 29.2          83                31.6\n17       Kentucky                 21.2          73                23.0\n18      Louisiana                 22.2          81                21.8\n19          Maine                 28.7          86                28.1\n20       Maryland                 29.2          83                29.4\n21  Massachusetts                 25.1          85                23.9\n22       Michigan                 36.5          78                25.8\n23      Minnesota                 36.5          81                38.7\n24    Mississippi                 15.6          83                18.1\n25       Missouri                 24.6          79                23.4\n26        Montana                 34.3          81                31.1\n27       Nebraska                 26.0          73                32.6\n28         Nevada                 22.3          72                21.7\n29  New Hampshire                 31.8          90                36.7\n30     New Jersey                 23.5          82                27.7\n31     New Mexico                 29.0          82                26.6\n32       New York                 23.4          83                25.8\n33 North Carolina                 22.1          84                23.3\n34   North Dakota                 27.4          77                29.1\n35           Ohio                 23.7          84                21.6\n36       Oklahoma                 23.2          79                23.7\n37         Oregon                 34.2          87                35.6\n38   Pennsylvania                 24.6          80                25.9\n39 South Carolina                 19.3          82                25.6\n40   South Dakota                 29.1          77                32.1\n41      Tennessee                 24.9          70                27.2\n42          Texas                 24.0          79                23.9\n43           Utah                 27.3          77                26.3\n44        Vermont                 36.2          85                36.8\n45       Virginia                 25.8          82                30.4\n46     Washington                 29.5          85                28.9\n47  West Virginia                 13.8          80                20.9\n48      Wisconsin                 31.3          80                28.1\n49        Wyoming                 27.2          75                31.8\n   mPINC.at.2020 BF.at.6.months.2018 mPINC.2018         Region  BF.2018\n1             78                20.6         78   Mid-Atlantic 24.43333\n2             83                42.1         83 MountainPlains 28.87500\n3             77                26.3         77        Midwest 27.68571\n4             69                20.4         69      Northeast 29.50000\n5             86                26.3         86      Southeast 21.52500\n6             85                22.4         85      Southwest 24.00000\n7             85                23.6         85        Western 30.42857\n8             83                23.6         83                      NA\n9             81                21.3         81                      NA\n10            73                22.1         73                      NA\n11            68                32.9         68                      NA\n12            75                28.4         75                      NA\n13            80                19.5         80                      NA\n14            78                31.7         78                      NA\n15            72                29.5         72                      NA\n16            79                26.1         79                      NA\n17            68                21.1         68                      NA\n18            75                20.2         75                      NA\n19            73                34.1         85                      NA\n20            79                26.2         79                      NA\n21            86                26.6         86                      NA\n22            77                23.9         77                      NA\n23            82                37.2         82                      NA\n24            73                13.0         73                      NA\n25            75                31.3         75                      NA\n26            86                35.7         86                      NA\n27            71                25.4         71                      NA\n28            77                20.8         77                      NA\n29            90                30.2         90                      NA\n30            80                24.4         80                      NA\n31            82                27.6         82                      NA\n32            82                21.4         82                      NA\n33            77                27.0         77                      NA\n34            73                29.1         73                      NA\n35            78                23.7         78                      NA\n36            75                21.6         75                      NA\n37            85                33.4         85                      NA\n38            78                25.6         78                      NA\n39            77                24.4         77                      NA\n40            73                32.2         73                      NA\n41            72                22.7         72                      NA\n42            77                24.1         77                      NA\n43            73                27.8         73                      NA\n44            82                38.0         82                      NA\n45            81                26.6         81                      NA\n46            86                29.1         85                      NA\n47            76                20.2         76                      NA\n48            80                28.3         80                      NA\n49            76                28.8         76                      NA\n    BF.2020  BF.2022\n1  26.31667 23.65000\n2  30.72500 28.73750\n3  26.28571 29.25714\n4  28.98333 28.58333\n5  22.45000 20.12500\n6  23.75714 24.87143\n7  29.27143 28.90000\n8        NA       NA\n9        NA       NA\n10       NA       NA\n11       NA       NA\n12       NA       NA\n13       NA       NA\n14       NA       NA\n15       NA       NA\n16       NA       NA\n17       NA       NA\n18       NA       NA\n19       NA       NA\n20       NA       NA\n21       NA       NA\n22       NA       NA\n23       NA       NA\n24       NA       NA\n25       NA       NA\n26       NA       NA\n27       NA       NA\n28       NA       NA\n29       NA       NA\n30       NA       NA\n31       NA       NA\n32       NA       NA\n33       NA       NA\n34       NA       NA\n35       NA       NA\n36       NA       NA\n37       NA       NA\n38       NA       NA\n39       NA       NA\n40       NA       NA\n41       NA       NA\n42       NA       NA\n43       NA       NA\n44       NA       NA\n45       NA       NA\n46       NA       NA\n47       NA       NA\n48       NA       NA\n49       NA       NA\n\n\nCode\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(maps)\n\n# Example breastfeeding data\nbreastfeeding_data &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n\n# Get US states map data\nus_states &lt;- st_as_sf(map(\"state\", plot = FALSE, fill = TRUE))\n\n# Correct state names to match the map data (lowercase and no spaces)\nbreastfeeding_data$State &lt;- tolower(breastfeeding_data$State)\n\n# Merge the breastfeeding data with the spatial data\nmerged_data &lt;- us_states %&gt;%\n  mutate(State = tolower(ID)) %&gt;%\n  left_join(breastfeeding_data, by = c(\"State\" = \"State\"))\n\n# Plot the heat map\nggplot(merged_data) +\n  geom_sf(aes(fill = BF.at.6.months..2022)) +\n  scale_fill_viridis_c(option = \"plasma\", na.value = \"grey90\") +\n  labs(title = \"Breastfeeding Rates at 6 Months by State (2022)\",\n       fill = \"Rate (%)\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(), axis.ticks = element_blank())"
  },
  {
    "objectID": "posts/Spatial_Data/Spatial_Data.html#spatial-data",
    "href": "posts/Spatial_Data/Spatial_Data.html#spatial-data",
    "title": "Spatial Data",
    "section": "",
    "text": "I made a heat map of the breastfeeding rates at 6 months across the US, based off of the Breastfeeding Report Card data from the CDC for 2022.\n\n\nCode\nread.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n\n\n            State BF.at.6.months..2022 mPINC..2022 BF.at.6.months.2020\n1         Alabama                 21.0          76                20.4\n2          Alaska                 30.9          82                35.3\n3         Arizona                 24.0          78                24.6\n4        Arkansas                 24.4          75                19.4\n5      California                 27.3          87                28.2\n6        Colorado                 32.1          85                34.1\n7     Connecticut                 26.3          87                25.7\n8        Delaware                 25.0          84                23.6\n9         Florida                 18.2          81                19.9\n10        Georgia                 18.7          75                22.1\n11         Hawaii                 27.7          75                30.6\n12          Idaho                 30.4          77                24.6\n13       Illinois                 28.3          82                23.9\n14        Indiana                 21.5          83                21.1\n15           Iowa                 27.0          75                24.8\n16         Kansas                 29.2          83                31.6\n17       Kentucky                 21.2          73                23.0\n18      Louisiana                 22.2          81                21.8\n19          Maine                 28.7          86                28.1\n20       Maryland                 29.2          83                29.4\n21  Massachusetts                 25.1          85                23.9\n22       Michigan                 36.5          78                25.8\n23      Minnesota                 36.5          81                38.7\n24    Mississippi                 15.6          83                18.1\n25       Missouri                 24.6          79                23.4\n26        Montana                 34.3          81                31.1\n27       Nebraska                 26.0          73                32.6\n28         Nevada                 22.3          72                21.7\n29  New Hampshire                 31.8          90                36.7\n30     New Jersey                 23.5          82                27.7\n31     New Mexico                 29.0          82                26.6\n32       New York                 23.4          83                25.8\n33 North Carolina                 22.1          84                23.3\n34   North Dakota                 27.4          77                29.1\n35           Ohio                 23.7          84                21.6\n36       Oklahoma                 23.2          79                23.7\n37         Oregon                 34.2          87                35.6\n38   Pennsylvania                 24.6          80                25.9\n39 South Carolina                 19.3          82                25.6\n40   South Dakota                 29.1          77                32.1\n41      Tennessee                 24.9          70                27.2\n42          Texas                 24.0          79                23.9\n43           Utah                 27.3          77                26.3\n44        Vermont                 36.2          85                36.8\n45       Virginia                 25.8          82                30.4\n46     Washington                 29.5          85                28.9\n47  West Virginia                 13.8          80                20.9\n48      Wisconsin                 31.3          80                28.1\n49        Wyoming                 27.2          75                31.8\n   mPINC.at.2020 BF.at.6.months.2018 mPINC.2018         Region  BF.2018\n1             78                20.6         78   Mid-Atlantic 24.43333\n2             83                42.1         83 MountainPlains 28.87500\n3             77                26.3         77        Midwest 27.68571\n4             69                20.4         69      Northeast 29.50000\n5             86                26.3         86      Southeast 21.52500\n6             85                22.4         85      Southwest 24.00000\n7             85                23.6         85        Western 30.42857\n8             83                23.6         83                      NA\n9             81                21.3         81                      NA\n10            73                22.1         73                      NA\n11            68                32.9         68                      NA\n12            75                28.4         75                      NA\n13            80                19.5         80                      NA\n14            78                31.7         78                      NA\n15            72                29.5         72                      NA\n16            79                26.1         79                      NA\n17            68                21.1         68                      NA\n18            75                20.2         75                      NA\n19            73                34.1         85                      NA\n20            79                26.2         79                      NA\n21            86                26.6         86                      NA\n22            77                23.9         77                      NA\n23            82                37.2         82                      NA\n24            73                13.0         73                      NA\n25            75                31.3         75                      NA\n26            86                35.7         86                      NA\n27            71                25.4         71                      NA\n28            77                20.8         77                      NA\n29            90                30.2         90                      NA\n30            80                24.4         80                      NA\n31            82                27.6         82                      NA\n32            82                21.4         82                      NA\n33            77                27.0         77                      NA\n34            73                29.1         73                      NA\n35            78                23.7         78                      NA\n36            75                21.6         75                      NA\n37            85                33.4         85                      NA\n38            78                25.6         78                      NA\n39            77                24.4         77                      NA\n40            73                32.2         73                      NA\n41            72                22.7         72                      NA\n42            77                24.1         77                      NA\n43            73                27.8         73                      NA\n44            82                38.0         82                      NA\n45            81                26.6         81                      NA\n46            86                29.1         85                      NA\n47            76                20.2         76                      NA\n48            80                28.3         80                      NA\n49            76                28.8         76                      NA\n    BF.2020  BF.2022\n1  26.31667 23.65000\n2  30.72500 28.73750\n3  26.28571 29.25714\n4  28.98333 28.58333\n5  22.45000 20.12500\n6  23.75714 24.87143\n7  29.27143 28.90000\n8        NA       NA\n9        NA       NA\n10       NA       NA\n11       NA       NA\n12       NA       NA\n13       NA       NA\n14       NA       NA\n15       NA       NA\n16       NA       NA\n17       NA       NA\n18       NA       NA\n19       NA       NA\n20       NA       NA\n21       NA       NA\n22       NA       NA\n23       NA       NA\n24       NA       NA\n25       NA       NA\n26       NA       NA\n27       NA       NA\n28       NA       NA\n29       NA       NA\n30       NA       NA\n31       NA       NA\n32       NA       NA\n33       NA       NA\n34       NA       NA\n35       NA       NA\n36       NA       NA\n37       NA       NA\n38       NA       NA\n39       NA       NA\n40       NA       NA\n41       NA       NA\n42       NA       NA\n43       NA       NA\n44       NA       NA\n45       NA       NA\n46       NA       NA\n47       NA       NA\n48       NA       NA\n49       NA       NA\n\n\nCode\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(maps)\n\n# Example breastfeeding data\nbreastfeeding_data &lt;- read.csv(\"C:/Users/betsy/OneDrive/Desktop/Master's Degree/BSBC Data.csv\")\n\n# Get US states map data\nus_states &lt;- st_as_sf(map(\"state\", plot = FALSE, fill = TRUE))\n\n# Correct state names to match the map data (lowercase and no spaces)\nbreastfeeding_data$State &lt;- tolower(breastfeeding_data$State)\n\n# Merge the breastfeeding data with the spatial data\nmerged_data &lt;- us_states %&gt;%\n  mutate(State = tolower(ID)) %&gt;%\n  left_join(breastfeeding_data, by = c(\"State\" = \"State\"))\n\n# Plot the heat map\nggplot(merged_data) +\n  geom_sf(aes(fill = BF.at.6.months..2022)) +\n  scale_fill_viridis_c(option = \"plasma\", na.value = \"grey90\") +\n  labs(title = \"Breastfeeding Rates at 6 Months by State (2022)\",\n       fill = \"Rate (%)\") +\n  theme_minimal() +\n  theme(axis.text = element_blank(), axis.ticks = element_blank())"
  }
]